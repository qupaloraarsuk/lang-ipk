!Distributed under the terms of the GNU General Public License version 2
! or any later version.

! ================================================================================ !
! This is the file that hosts the morphology for the Inupiaq morphological parser  !
! Rules for phonology and orthography are kept in the rule-file xfst-ipk.txt       !
! ================================================================================ !

Multichar_Symbols
+N +V +Part +Prop +Pron  !!= * @CODE@ POS
+Sg +Du +Pl			     !!= * @CODE@ Number
+1Sg +2Sg +3Sg +4Sg	     !!= * @CODE@ Intransitive number Sg
+1Du +2Du +3Du +4Du	     !!= * @CODE@ Intransitive number Du
+1Pl +2Pl +3Pl +4Pl	     !!= * @CODE@ Intransitive number Pl
+1SgO +2SgO +3SgO +4SgO  !!= * @CODE@ Objective conjugation
+1DuO +2DuO +3DuO +4DuO  !!= * @CODE@ Objective conjugation
+1PlO +2PlO +3PlO +4PlO   !!= * @CODE@ Objective conjugation

+Symbol !!≈ * @CODE@ = independent symbols in the text stream, like £, €, ©

!! 4th person still missing in the transitive conjugation

+Abs +Rel +Trm +Loc +Abl +Mod !!= * @CODE@ Cases
+Prs +Prt !!= * @CODE@ Tenses
+Ind +Int +Cau +ConReal +ConUnreal !!= * @CODE@ Modes NB! No Imp
+Arch !!= * @CODE@ tags for archaic forms. In this pilot just used to indicate twin forms

! ľ !digraphs plus ľ for voiceless palatalized l
! Remember to check this letter, it was problematic on Linux


        !! !!Symbols that need to be escaped on the lower side (towards twolc):
 »7     !!≈ ; @CODE@ : Literal »
 «7     !!≈ ; @CODE@ : Literal «
        !! {{{
 %[%>%] !!= @CODE@ - Literal >
 %[%<%] !!= @CODE@ - Literal <
        !! }}}


%> !morphemeborder

! Derivational affixes
+LLATU +LLATU=NIAQ +NIAQ +NIAQ=ŊIT +ŊIT +SAAĠE +SAAĠE=ŊIT +TEQ !!= * @CODE@ verb elaborating
+IT +QAQ !!= @CODE@
+VIK !!= * @CODE@ nominalizers
+LU +GUUQ +UNA !!= * @CODE@ clitics

! Morphophonological dummy symbols
%^TRUNC !!= * @CODE@ truncation dummy
%^CVCTRUNC !!= * @CODE@ dummy for very long truncations
%^VCTRUNC !!= * @CODE@ dummy for long truncation
%^FRIC !!= * @CODE@ dummy for fricativizing stem-final consonants.
!! Needed to avoid a general rule that also would affect unwantedly as in *aaġagu for aaqagu.
!! The alternative would have been to postulate truncating flexives with a fricative first consonant (*aiviq -q +ġit) but that is hokus pokus
%^EBLOCK !!= * @CODE@ dummy to block schwa going to a (aŋutik not *aŋuttak)
%^C !!= * @CODE@ dummy for intermediate gemination
%^DEFRIC !!= * @CODE@ dummy when fricatives go stops (amaġuq -> amaqquk) as apposed to %C in niġi+VIK -> niġġivik
%^SCHWADEL !!= * @CODE@ !dummy with derivatives truncating semi-final schwa
!%^CLIT !dummy with clitics used in Kalaallisut. This far unused in ipk

!! !!Flag diacritics

@P.IV.ON@ !!= * @CODE@ Flag - sets value for transitivity to IV
@P.TV.ON@ !!= * @CODE@ Flag - sets value for transitivity to TV
@R.IV.ON@ !!= * @CODE@ Flag - reset value for transitivity to IV
@R.TV.ON@ !!= * @CODE@ Flag - reset value for transitivity to TV
@D.IV.ON@ !!= * @CODE@ Flag - delete if unsaturated IV flag (=Verb was not IV)
@D.TV.ON@ !!= * @CODE@ Flag - delete if unsaturated TV flag (=Verb was not TV)


!! We have manually optimised the structure of our lexicon using following
!! flag diacritics to restrict morhpological combinatorics - only allow compounds
!! with verbs if the verb is further derived into a noun again:
 @P.NeedNoun.ON@    !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
 @D.NeedNoun.ON@    !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
 @C.NeedNoun@       !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
!! 
!! For languages that allow compounding, the following flag diacritics are needed
!! to control position-based compounding restrictions for nominals. Their use is
!! handled automatically if combined with +CmpN/xxx tags. If not used, they will
!! do no harm.
 @P.CmpFrst.FALSE@ !!≈ | @CODE@ | Require that words tagged as such only appear first
 @D.CmpPref.TRUE@  !!≈ | @CODE@ | Block such words from entering ENDLEX
 @P.CmpPref.FALSE@ !!≈ | @CODE@ | Block these words from making further compounds
 @D.CmpLast.TRUE@  !!≈ | @CODE@ | Block such words from entering R
 @D.CmpNone.TRUE@  !!≈ | @CODE@ | Combines with the next tag to prohibit compounding
 @U.CmpNone.FALSE@ !!≈ | @CODE@ | Combines with the prev tag to prohibit compounding
 @P.CmpOnly.TRUE@  !!≈ | @CODE@ | Sets a flag to indicate that the word has passed R
 @D.CmpOnly.FALSE@ !!≈ | @CODE@ | Disallow words coming directly from root.
!! 
!! Use the following flag diacritics to control downcasing of derived proper
!! nouns (e.g. Finnish Pariisi -> pariisilainen). See e.g. North Sámi for how to use
!! these flags. There exists a ready-made regex that will do the actual down-casing
!! given the proper use of these flags.
 @U.Cap.Obl@        !!≈ | @CODE@ | Allowing downcasing of derived names: deatnulasj.
 @U.Cap.Opt@        !!≈ | @CODE@ | Allowing downcasing of derived names: deatnulasj.


!! This file gives the start  of the Iñupiaq lexicon.
!! The lexicon Root points at the different parts of speech.
!! Each POS has its own file stems/nouns.lexc, etc., which in
!! turn points to affixes/nouns.lexc, etc.
!! POS-changing nominalizers are found in affixes/verbs.lexc and
!! verbalizers in affixes/nouns.lexc
!! It might be a good idea to have noun-ipk-der.txt etc. as well.
!! The common, final lexica, are found in clitics.lexc.


LEXICON Root !!= @CODE@
 Nouns ;	     !!= * @CODE@ 
 Verbs ;	     !!= * @CODE@ 
 Determiners ;   !!= * @CODE@ 
 Adverbs ;	     !!= * @CODE@ 
 prop ;		     !!= * @CODE@ 
 pron ;		     !!= * @CODE@ 
 part ;		     !!= * @CODE@ 
 Punctuation ;   !!= * @CODE@ 
 Symbols     ;   !!= * @CODE@ 

!About lexica and continuations. Instead of separate lexica for words
! that can only be sing or only plur and others for words that can take
! all numbers, this is a better solution: Normal nouns are tagged tp,
! tup etc. whereas specials are tagged with the continuation lexicon

